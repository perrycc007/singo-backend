generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  songs            Song[]
  progress         Progress[]
  ProgressQuestion ProgressQuestion[]
}

model Song {
  id        Int        @id @default(autoincrement())
  title     String
  artist    String
  sentences Sentence[]
  progress  Progress[]
  users     User[]
  question  Question[]
}

model Question {
  id             Int                @id @default(autoincrement())
  songId         Int
  song           Song               @relation(fields: [songId], references: [id])
  text           String
  type           String // translation, pronunciation, sentence formation, etc.
  practiceNumber Int
  level          Int
  step           Int
  correctAnswer  String
  sentenceId     Int?
  vocabularyId   Int?
  progress       ProgressQuestion[]
  Sentence       Sentence?          @relation(fields: [sentenceId], references: [id])
  Vocabulary     Vocabulary?        @relation(fields: [vocabularyId], references: [id])
}

model Progress {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
  songId           Int
  song             Song     @relation(fields: [songId], references: [id])
  currentLevel     Int
  currentStep      Int
  currentPractice  Int
  lastPracticeDate DateTime
  createdAt        DateTime @default(now())
}

model ProgressQuestion {
  id                    Int      @id @default(autoincrement())
  questionId            Int
  question              Question @relation(fields: [questionId], references: [id])
  wrongFrequency        Float
  frequency             Int
  lastEncounter         DateTime
  nextScheduledRevision DateTime
  userId                Int
  user                  User     @relation(fields: [userId], references: [id])
  halfLife              Float
}

model Sentence {
  id            Int          @id @default(autoincrement())
  line          String
  translation   String
  pronunciation String
  audioUrl      String
  songId        Int
  song          Song         @relation(fields: [songId], references: [id])
  vocabularies  Vocabulary[]
  questions     Question[]
}

model Vocabulary {
  id            Int        @id @default(autoincrement())
  word          String
  meaning       String
  pronunciation String
  audioUrl      String
  sentenceId    Int
  sentence      Sentence   @relation(fields: [sentenceId], references: [id])
  questions     Question[]
}
